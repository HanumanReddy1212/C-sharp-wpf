using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace WpfDrawingApplication
{
    public partial class MainWindow : Window
    {
        private Point initialMousePosition;
        private Rectangle currentRectangle;
        private List<Rectangle> rectangles = new List<Rectangle>();
        private bool isDragging = false;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void Canvas_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (image.Source == null) return;

            initialMousePosition = e.GetPosition(canvas);

            if (currentRectangle == null)
            {
                currentRectangle = new Rectangle
                {
                    Stroke = Brushes.Black,
                    StrokeThickness = 2,
                    Fill = Brushes.Transparent,
                    Width = 0,
                    Height = 0
                };

                canvas.Children.Add(currentRectangle);
            }

            Canvas.SetLeft(currentRectangle, initialMousePosition.X);
            Canvas.SetTop(currentRectangle, initialMousePosition.Y);

            isDragging = true;
        }

        private void Canvas_MouseUp(object sender, MouseButtonEventArgs e)
        {
            isDragging = false;

            if (currentRectangle.Width == 0 && currentRectangle.Height == 0)
            {
                canvas.Children.Remove(currentRectangle);
                currentRectangle = null;
                return;
            }

            currentRectangle = null;
        }

        private void Canvas_MouseMove(object sender, MouseEventArgs e)
        {
            if (!isDragging) return;

            Point currentPosition = e.GetPosition(canvas);

            double width = currentPosition.X - initialMousePosition.X;
            double height = currentPosition.Y - initialMousePosition.Y;

            if (width > 0)
            {
                currentRectangle.Width = width;
            }
            else
            {
                Canvas.SetLeft(currentRectangle, currentPosition.X);
                currentRectangle.Width = initialMousePosition.X - currentPosition.X;
            }

            if (height > 0)
            {
                currentRectangle.Height = height;
            }
            else
            {
                Canvas.SetTop(currentRectangle, currentPosition.Y);
                currentRectangle.Height = initialMousePosition.Y - currentPosition.Y;
            }
        }

        private void Canvas_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (image.Source == null) return;

            var rectangle = e.Source as Rectangle;

            if (rectangle != null)
            {
                currentRectangle = rectangle;

                foreach (var r in rectangles)
                {
                    r.Stroke = Brushes.Black;
                }

                currentRectangle.Stroke = Brushes.Red;
            }
        }

        private void Canvas_MouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (image.Source == null) return;

            var rectangle = e.Source as Rectangle;

            if (rectangle != null)
            {
                canvas.Children.Remove(rectangle);
                rectangles.Remove(rectangle);
            }
        }

        private void Canvas_MouseMove_1(object sender, MouseEventArgs e)
        {
            if (!isDragging) return;

            Point currentPosition = e.GetPosition(canvas);

            double deltaX = currentPosition.X - initialMousePosition.X;
            double deltaY = currentPosition.Y - initialMousePosition.Y;

            currentRectangle.SetValue(Canvas.LeftProperty, Canvas.GetLeft(currentRectangle) + deltaX);
            currentRectangle.SetValue(Canvas.TopProperty, Canvas.GetTop(currentRectangle) + deltaY);

            initialMousePosition = currentPosition;
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            var saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "PNG Image|*.png";
            if (saveFileDialog.ShowDialog() == true)
            {
                Size imageSize =            new Size(image.ActualWidth, image.ActualHeight);
            var renderTarget = new RenderTargetBitmap((int)imageSize.Width, (int)imageSize.Height, 96, 96, PixelFormats.Pbgra32);
            renderTarget.Render(image);

            var croppedBitmap = new CroppedBitmap(renderTarget, new Int32Rect((int)Canvas.GetLeft(image), (int)Canvas.GetTop(image), (int)image.ActualWidth, (int)image.ActualHeight));

            var pngEncoder = new PngBitmapEncoder();
            pngEncoder.Frames.Add(BitmapFrame.Create(croppedBitmap));

            using (var outputStream = System.IO.File.Create(saveFileDialog.FileName))
            {
                pngEncoder.Save(outputStream);
            }
        }
    }

    private void LoadButton_Click(object sender, RoutedEventArgs e)
    {
        var openFileDialog = new OpenFileDialog();
        openFileDialog.Filter = "Image Files(*.BMP;*.JPG;*.GIF;*.PNG)|*.BMP;*.JPG;*.GIF;*.PNG";
        if (openFileDialog.ShowDialog() == true)
        {
            image.Source = new BitmapImage(new Uri(openFileDialog.FileName));
            rectangles.Clear();
            canvas.Children.Clear();
        }
    }

    private void ColorPicker_SelectedColorChanged(object sender, RoutedPropertyChangedEventArgs<Color?> e)
    {
        if (currentRectangle != null && currentRectangle.Stroke is SolidColorBrush)
        {
            SolidColorBrush brush = (SolidColorBrush)currentRectangle.Stroke;
            brush.Color = (Color)e.NewValue;
        }
    }

    private void Canvas_SizeChanged(object sender, SizeChangedEventArgs e)
    {
        if (image.Source == null) return;

        double canvasAspectRatio = canvas.ActualWidth / canvas.ActualHeight;
        double imageAspectRatio = image.ActualWidth / image.ActualHeight;

        double scaleFactor = 1;

        if (canvasAspectRatio > imageAspectRatio)
        {
            scaleFactor = canvas.ActualHeight / image.ActualHeight;
        }
        else
        {
            scaleFactor = canvas.ActualWidth / image.ActualWidth;
        }

        var transform = new ScaleTransform(scaleFactor, scaleFactor);

        image.RenderTransform = transform;
        Canvas.SetLeft(image, (canvas.ActualWidth - (image.ActualWidth * scaleFactor)) / 2);
        Canvas.SetTop(image, (canvas.ActualHeight - (image.ActualHeight * scaleFactor)) / 2);
    }
}

